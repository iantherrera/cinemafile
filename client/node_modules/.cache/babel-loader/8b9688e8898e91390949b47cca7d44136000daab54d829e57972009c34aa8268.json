{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\cinemafile\\\\client\\\\src\\\\components\\\\movieCard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tmdbKey = \"11039f14945ee0f2e0036d42b77c687b\";\n// Test user & db schema:\n/* \r\n_id: 6369d823852305533b133048\r\n\r\nuserName: user1\r\n\r\npassword: password1\r\n\r\nhash: passwordhash\r\n\r\nsalt: hashsalt\r\n\r\nmovieData: [] \r\n*/\n\n// Movie Card template\nconst MovieCard = props => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"movieCard\",\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cardOptionsContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"viewedCheckContainer\",\n      children: \"viewed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"favoriteButton\",\n      children: \"favorite\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"deleteCardContainer\",\n      children: \"delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"rankTitleYearContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movieRank\",\n      children: props.metaData.rank\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movieTitleYearContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movieTitle\",\n        children: props.metaData.movieTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movieYear\",\n        children: props.metaData.year\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"moviePosterContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `https://image.tmdb.org/t/p/original/${props.metaData.posterPath}`,\n      alt: \"Movie poster\",\n      className: \"posterImg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movieSynopsis\",\n    children: props.metaData.overview\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 22,\n  columnNumber: 3\n}, this);\n\n// Functional component to render movie cards in app\n_c = MovieCard;\nexport default function MovieCards() {\n  _s();\n  const [userData, setUserData] = useState([]);\n  const initMovieData = require(\"../initData/initMovieData.json\");\n\n  // Method to fetch user data from database\n  useEffect(() => {\n    async function getUserData() {\n      const response = await fetch(`http://localhost:5000/userData/`);\n      if (!response.ok) {\n        const message = `An error occurred: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n      const userData = await response.json();\n      setUserData(userData);\n    }\n    getUserData();\n    return;\n  }, [userData.movieData]);\n\n  // Initialize movie list for new users\n  if (typeof userData.movieData == \"undefined\") {\n    userData.movieData = initMovieData;\n    userData.movieData.map(setChecked => setChecked.checked = false);\n    userData.movieData.map(setFavorite => setFavorite.favorite = false);\n    addData();\n\n    // Method to populate metadata from external tmdb API for each ID in initialized list\n    async function addData() {\n      for (let i = 0; i < initMovieData.length; i++) {\n        const response = await fetch(`https://api.themoviedb.org/3/movie/${initMovieData[i].imdbId}?api_key=${tmdbKey}&language=en-US`);\n        if (!response.ok) {\n          const message = `An error occurred: ${response.statusText}`;\n          window.alert(message);\n          return;\n        }\n        const metaData = await response.json();\n        console.log(metaData);\n        userData.movieData[i].movieTitle = metaData.title;\n        userData.movieData[i].posterPath = metaData.poster_path;\n        userData.movieData[i].overview = metaData.overview;\n        userData.movieData[i].year = metaData.release_date.substring(0, 4);\n      }\n    }\n    setUserData(userData);\n  }\n\n  // TODO Method to toggle viewed status and update user data\n\n  // TODO Method to toggle favorite and update user data\n\n  // This method will delete a movie entry\n  async function deleteMovie(id) {\n    await fetch(`http://localhost:5000/${id}`, {\n      method: \"DELETE\"\n    });\n    const newUserData = userData.movieData.filter(el => el._id !== id);\n    setUserData(newUserData);\n  }\n\n  // Method to map out movie data & populate metadata for each movie card\n  function movieCards() {\n    const movieMetaData = userData.movieData;\n    return movieMetaData.map((metaData, index) => {\n      return /*#__PURE__*/_jsxDEV(MovieCard, {\n        metaData: metaData\n        /*           viewed={viewed}\r\n                  favorite={favorite} */,\n        deleteMovie: () => deleteMovie(userData.movieData.rank)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this);\n    });\n  }\n\n  // Displays the movie cards\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"movieCardsContainer\",\n    children: movieCards()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n_s(MovieCards, \"MEi9diF6EeXMji3OmOnykM+Lnog=\");\n_c2 = MovieCards;\nvar _c, _c2;\n$RefreshReg$(_c, \"MovieCard\");\n$RefreshReg$(_c2, \"MovieCards\");","map":{"version":3,"names":["React","useEffect","useState","Link","tmdbKey","MovieCard","props","metaData","rank","movieTitle","year","posterPath","overview","MovieCards","userData","setUserData","initMovieData","require","getUserData","response","fetch","ok","message","statusText","window","alert","json","movieData","map","setChecked","checked","setFavorite","favorite","addData","i","length","imdbId","console","log","title","poster_path","release_date","substring","deleteMovie","id","method","newUserData","filter","el","_id","movieCards","movieMetaData","index"],"sources":["C:/Users/User/OneDrive/Desktop/cinemafile/client/src/components/movieCard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst tmdbKey = \"11039f14945ee0f2e0036d42b77c687b\"\r\n// Test user & db schema:\r\n/* \r\n_id: 6369d823852305533b133048\r\n\r\nuserName: user1\r\n\r\npassword: password1\r\n\r\nhash: passwordhash\r\n\r\nsalt: hashsalt\r\n\r\nmovieData: [] \r\n*/\r\n\r\n// Movie Card template\r\nconst MovieCard = (props) => (\r\n  <div className=\"movieCard\">\r\n    <div className='cardOptionsContainer'>\r\n      <div className='viewedCheckContainer'>viewed</div>\r\n      <div className='favoriteButton'>favorite</div>\r\n      <div className='deleteCardContainer'>delete</div>\r\n    </div>\r\n    <div className='rankTitleYearContainer'>\r\n      <div className=\"movieRank\">{props.metaData.rank}</div>\r\n      <div className='movieTitleYearContainer'>\r\n        <div className='movieTitle'>{props.metaData.movieTitle}</div>\r\n        <div className='movieYear'>{props.metaData.year}</div>\r\n      </div>\r\n    </div>\r\n    <div className='moviePosterContainer'>\r\n      <img src={`https://image.tmdb.org/t/p/original/${props.metaData.posterPath}`} alt=\"Movie poster\" className='posterImg' />\r\n    </div>\r\n    <div className='movieSynopsis'>\r\n      {props.metaData.overview}\r\n    </div>\r\n  </div>\r\n);\r\n\r\n// Functional component to render movie cards in app\r\nexport default function MovieCards() {\r\n  const [userData, setUserData] = useState([]);\r\n\r\n  const initMovieData = require(\"../initData/initMovieData.json\");\r\n\r\n  // Method to fetch user data from database\r\n  useEffect(() => {\r\n    async function getUserData() {\r\n      const response = await fetch(`http://localhost:5000/userData/`);\r\n\r\n      if (!response.ok) {\r\n        const message = `An error occurred: ${response.statusText}`;\r\n        window.alert(message);\r\n        return;\r\n      }\r\n\r\n      const userData = await response.json();\r\n\r\n      setUserData(userData);\r\n    }\r\n    getUserData();\r\n\r\n    return;\r\n  }, [userData.movieData])\r\n\r\n  // Initialize movie list for new users\r\n  if (typeof userData.movieData == \"undefined\") {\r\n    userData.movieData = initMovieData;\r\n\r\n    userData.movieData.map((setChecked) =>\r\n      setChecked.checked = false)\r\n    userData.movieData.map((setFavorite) =>\r\n      setFavorite.favorite = false)\r\n\r\n    addData();\r\n\r\n    // Method to populate metadata from external tmdb API for each ID in initialized list\r\n    async function addData() {\r\n      for (let i = 0; i < initMovieData.length; i++) {\r\n        const response = await fetch(`https://api.themoviedb.org/3/movie/${initMovieData[i].imdbId}?api_key=${tmdbKey}&language=en-US`);\r\n\r\n        if (!response.ok) {\r\n          const message = `An error occurred: ${response.statusText}`;\r\n          window.alert(message);\r\n          return;\r\n        }\r\n\r\n        const metaData = await response.json();\r\n        console.log(metaData);\r\n        userData.movieData[i].movieTitle = metaData.title;\r\n        userData.movieData[i].posterPath = metaData.poster_path;\r\n        userData.movieData[i].overview = metaData.overview;\r\n        userData.movieData[i].year = metaData.release_date.substring(0, 4);\r\n      }\r\n    }\r\n\r\n    setUserData(userData);\r\n  }\r\n\r\n  // TODO Method to toggle viewed status and update user data\r\n\r\n  // TODO Method to toggle favorite and update user data\r\n\r\n\r\n  // This method will delete a movie entry\r\n  async function deleteMovie(id) {\r\n    await fetch(`http://localhost:5000/${id}`, {\r\n      method: \"DELETE\"\r\n    });\r\n\r\n    const newUserData = userData.movieData.filter((el) => el._id !== id);\r\n    setUserData(newUserData);\r\n  }\r\n\r\n  // Method to map out movie data & populate metadata for each movie card\r\n  function movieCards() {\r\n    const movieMetaData = userData.movieData;\r\n    return movieMetaData.map((metaData, index) => {\r\n      return (\r\n        <MovieCard\r\n          metaData={metaData}\r\n          /*           viewed={viewed}\r\n                    favorite={favorite} */\r\n          deleteMovie={() => deleteMovie(userData.movieData.rank)}\r\n          key={index}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  // Displays the movie cards\r\n  return (\r\n    <div id='movieCardsContainer'>\r\n      {movieCards()}\r\n    </div>\r\n  );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AAAC;AAExC,MAAMC,OAAO,GAAG,kCAAkC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMC,SAAS,GAAIC,KAAK,iBACtB;EAAK,SAAS,EAAC,WAAW;EAAA,wBACxB;IAAK,SAAS,EAAC,sBAAsB;IAAA,wBACnC;MAAK,SAAS,EAAC,sBAAsB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAa,eAClD;MAAK,SAAS,EAAC,gBAAgB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAe,eAC9C;MAAK,SAAS,EAAC,qBAAqB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAa;EAAA;IAAA;IAAA;IAAA;EAAA,QAC7C,eACN;IAAK,SAAS,EAAC,wBAAwB;IAAA,wBACrC;MAAK,SAAS,EAAC,WAAW;MAAA,UAAEA,KAAK,CAACC,QAAQ,CAACC;IAAI;MAAA;MAAA;MAAA;IAAA,QAAO,eACtD;MAAK,SAAS,EAAC,yBAAyB;MAAA,wBACtC;QAAK,SAAS,EAAC,YAAY;QAAA,UAAEF,KAAK,CAACC,QAAQ,CAACE;MAAU;QAAA;QAAA;QAAA;MAAA,QAAO,eAC7D;QAAK,SAAS,EAAC,WAAW;QAAA,UAAEH,KAAK,CAACC,QAAQ,CAACG;MAAI;QAAA;QAAA;QAAA;MAAA,QAAO;IAAA;MAAA;MAAA;MAAA;IAAA,QAClD;EAAA;IAAA;IAAA;IAAA;EAAA,QACF,eACN;IAAK,SAAS,EAAC,sBAAsB;IAAA,uBACnC;MAAK,GAAG,EAAG,uCAAsCJ,KAAK,CAACC,QAAQ,CAACI,UAAW,EAAE;MAAC,GAAG,EAAC,cAAc;MAAC,SAAS,EAAC;IAAW;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QACrH,eACN;IAAK,SAAS,EAAC,eAAe;IAAA,UAC3BL,KAAK,CAACC,QAAQ,CAACK;EAAQ;IAAA;IAAA;IAAA;EAAA,QACpB;AAAA;EAAA;EAAA;EAAA;AAAA,QAET;;AAED;AAAA,KAvBMP,SAAS;AAwBf,eAAe,SAASQ,UAAU,GAAG;EAAA;EACnC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMc,aAAa,GAAGC,OAAO,CAAC,gCAAgC,CAAC;;EAE/D;EACAhB,SAAS,CAAC,MAAM;IACd,eAAeiB,WAAW,GAAG;MAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,iCAAgC,CAAC;MAE/D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,OAAO,GAAI,sBAAqBH,QAAQ,CAACI,UAAW,EAAC;QAC3DC,MAAM,CAACC,KAAK,CAACH,OAAO,CAAC;QACrB;MACF;MAEA,MAAMR,QAAQ,GAAG,MAAMK,QAAQ,CAACO,IAAI,EAAE;MAEtCX,WAAW,CAACD,QAAQ,CAAC;IACvB;IACAI,WAAW,EAAE;IAEb;EACF,CAAC,EAAE,CAACJ,QAAQ,CAACa,SAAS,CAAC,CAAC;;EAExB;EACA,IAAI,OAAOb,QAAQ,CAACa,SAAS,IAAI,WAAW,EAAE;IAC5Cb,QAAQ,CAACa,SAAS,GAAGX,aAAa;IAElCF,QAAQ,CAACa,SAAS,CAACC,GAAG,CAAEC,UAAU,IAChCA,UAAU,CAACC,OAAO,GAAG,KAAK,CAAC;IAC7BhB,QAAQ,CAACa,SAAS,CAACC,GAAG,CAAEG,WAAW,IACjCA,WAAW,CAACC,QAAQ,GAAG,KAAK,CAAC;IAE/BC,OAAO,EAAE;;IAET;IACA,eAAeA,OAAO,GAAG;MACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlB,aAAa,CAACmB,MAAM,EAAED,CAAC,EAAE,EAAE;QAC7C,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAE,sCAAqCJ,aAAa,CAACkB,CAAC,CAAC,CAACE,MAAO,YAAWhC,OAAQ,iBAAgB,CAAC;QAE/H,IAAI,CAACe,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAMC,OAAO,GAAI,sBAAqBH,QAAQ,CAACI,UAAW,EAAC;UAC3DC,MAAM,CAACC,KAAK,CAACH,OAAO,CAAC;UACrB;QACF;QAEA,MAAMf,QAAQ,GAAG,MAAMY,QAAQ,CAACO,IAAI,EAAE;QACtCW,OAAO,CAACC,GAAG,CAAC/B,QAAQ,CAAC;QACrBO,QAAQ,CAACa,SAAS,CAACO,CAAC,CAAC,CAACzB,UAAU,GAAGF,QAAQ,CAACgC,KAAK;QACjDzB,QAAQ,CAACa,SAAS,CAACO,CAAC,CAAC,CAACvB,UAAU,GAAGJ,QAAQ,CAACiC,WAAW;QACvD1B,QAAQ,CAACa,SAAS,CAACO,CAAC,CAAC,CAACtB,QAAQ,GAAGL,QAAQ,CAACK,QAAQ;QAClDE,QAAQ,CAACa,SAAS,CAACO,CAAC,CAAC,CAACxB,IAAI,GAAGH,QAAQ,CAACkC,YAAY,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;MACpE;IACF;IAEA3B,WAAW,CAACD,QAAQ,CAAC;EACvB;;EAEA;;EAEA;;EAGA;EACA,eAAe6B,WAAW,CAACC,EAAE,EAAE;IAC7B,MAAMxB,KAAK,CAAE,yBAAwBwB,EAAG,EAAC,EAAE;MACzCC,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,MAAMC,WAAW,GAAGhC,QAAQ,CAACa,SAAS,CAACoB,MAAM,CAAEC,EAAE,IAAKA,EAAE,CAACC,GAAG,KAAKL,EAAE,CAAC;IACpE7B,WAAW,CAAC+B,WAAW,CAAC;EAC1B;;EAEA;EACA,SAASI,UAAU,GAAG;IACpB,MAAMC,aAAa,GAAGrC,QAAQ,CAACa,SAAS;IACxC,OAAOwB,aAAa,CAACvB,GAAG,CAAC,CAACrB,QAAQ,EAAE6C,KAAK,KAAK;MAC5C,oBACE,QAAC,SAAS;QACR,QAAQ,EAAE7C;QACV;AACV,wCADU;QAEA,WAAW,EAAE,MAAMoC,WAAW,CAAC7B,QAAQ,CAACa,SAAS,CAACnB,IAAI;MAAE,GACnD4C,KAAK;QAAA;QAAA;QAAA;MAAA,QACV;IAEN,CAAC,CAAC;EACJ;;EAEA;EACA,oBACE;IAAK,EAAE,EAAC,qBAAqB;IAAA,UAC1BF,UAAU;EAAE;IAAA;IAAA;IAAA;EAAA,QACT;AAEV;AAAC,GAhGuBrC,UAAU;AAAA,MAAVA,UAAU;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}