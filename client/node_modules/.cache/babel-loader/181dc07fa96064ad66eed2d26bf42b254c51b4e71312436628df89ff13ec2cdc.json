{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\cinemafile\\\\client\\\\src\\\\components\\\\movieCard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tmdbKey = \"11039f14945ee0f2e0036d42b77c687b\";\n\n// Test user & db schema:\n/* \r\n_id: 6369d823852305533b133048\r\n\r\nuserName: user1\r\n\r\npassword: password1\r\n\r\nhash: passwordhash\r\n\r\nsalt: hashsalt\r\n\r\nmovieData: [] \r\n*/\n\n// Movie Card template\nconst MovieCard = props => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"movieCard\",\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cardOptionsContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"viewedCheckContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"checkLabel\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"checkbox\",\n          type: \"checkbox\",\n          defaultChecked: props.metaData.checked,\n          onChange: () => {\n            props.toggleViewed(props.metaData.imdbId);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this), \"Viewed\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"favoriteCheckContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"checkLabel\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"checkbox\",\n          type: \"checkbox\",\n          defaultChecked: props.metaData.favorite,\n          onChange: () => {\n            props.toggleFavorite(props.metaData.imdbId);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), \"Favorite\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"deleteCardContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"deleteButton\",\n        type: \"button\",\n        onClick: () => {\n          props.deleteMovie(props.metaData.imdbId);\n        },\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movieInfoContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rank\",\n      children: props.metaData.rank\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"titleYearContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: props.metaData.movieTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"year\",\n        children: props.metaData.year\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"moviePosterContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `https://image.tmdb.org/t/p/original/${props.metaData.posterPath}`,\n      alt: \"Movie poster\",\n      className: \"posterImg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"synopsis\",\n    children: props.metaData.overview\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 22,\n  columnNumber: 3\n}, this);\n\n// Functional component to render movie cards in app\n_c = MovieCard;\nexport default function MovieCards() {\n  _s();\n  const [userData, setUserData] = useState([]);\n  const [movieData, setMovieData] = useState([]);\n  const [isListView, setIsListView] = useState(false);\n  const initMovieData = require(\"../initData/initMovieData.json\");\n  const userId = '6370584abcfd94a3d0d7c675';\n\n  // Method to fetch user data and render cards when movie list updates\n  useEffect(() => {\n    async function getUserData() {\n      const response = await fetch(`http://localhost:5000/userData/${userId}`);\n      if (!response.ok) {\n        const message = `An error occurred: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n      const userData = await response.json();\n      setUserData(userData);\n      const movieData = userData.movieData;\n      setMovieData(movieData);\n    }\n    getUserData();\n    return;\n  }, [movieData.length]);\n  initData();\n  async function initData() {\n    console.log(userData);\n    userData.movieData = initMovieData;\n    userData.movieData.map(setChecked => setChecked.checked = false);\n    userData.movieData.map(setFavorite => setFavorite.favorite = false);\n    addData();\n    setUserData(userData);\n    await updateUserDB(userData._id);\n  }\n\n  // Method to populate metadata from external tmdb API for each ID in initialized list\n  async function addData() {\n    for (let i = 0; i < initMovieData.length; i++) {\n      const response = await fetch(`https://api.themoviedb.org/3/movie/${initMovieData[i].imdbId}?api_key=${tmdbKey}&language=en-US`);\n      if (!response.ok) {\n        const message = `An error occurred: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n      const metaData = await response.json();\n      userData.movieData[i].movieTitle = metaData.title;\n      userData.movieData[i].posterPath = metaData.poster_path;\n      userData.movieData[i].overview = metaData.overview;\n      userData.movieData[i].year = metaData.release_date.substring(0, 4);\n    }\n  }\n\n  // Method to update user data in server\n  // Post request to update the data in the database\n  async function updateUserDB(id) {\n    const updatedUser = userData;\n    await fetch(`http://localhost:5000/update/${id}`, {\n      method: \"POST\",\n      body: JSON.stringify(updatedUser),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  // Toggle viewed status and update user data\n  async function toggleViewed(id) {\n    const checked = userData.movieData.find(movie => movie.id === id).checked;\n    const toggleCheck = !checked;\n    userData.movieData.find(movie => movie.id === id).checked = toggleCheck;\n    setUserData(userData);\n    await updateUserDB(userData._id);\n  }\n\n  // Toggle favorite and update user data\n  async function toggleFavorite(id) {\n    const favorite = userData.movieData.find(movie => movie.id === id).favorite;\n    const toggleFavorite = !favorite;\n    userData.movieData.find(movie => movie.id === id).favorite = toggleFavorite;\n    setUserData(userData);\n    await updateUserDB(userData._id);\n  }\n\n  // Delete a movie entry\n  async function deleteMovie(id) {\n    const newMovieData = userData.movieData.filter(movies => movies.id !== id);\n    userData.movieData = newMovieData;\n    await updateUserDB(userData._id);\n    setUserData(userData);\n    setMovieData(newMovieData);\n  }\n\n  // Populate metadata for each movie card\n  function movieCards() {\n    const movieMetaData = movieData;\n    return movieMetaData.map(metaData => {\n      metaData.id = metaData.imdbId;\n      return /*#__PURE__*/_jsxDEV(MovieCard, {\n        metaData: metaData,\n        toggleViewed: () => toggleViewed(metaData.imdbId),\n        toggleFavorite: () => toggleFavorite(metaData.imdbId),\n        deleteMovie: () => deleteMovie(metaData.imdbId)\n      }, metaData.imdbId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this);\n    });\n  }\n\n  // View style button\n  function viewStyleButton() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"viewButton\",\n      className: \"navButton\",\n      type: \"button\",\n      onClick: () => {\n        const currentListView = !isListView;\n        setIsListView(isListView => !isListView);\n        if (currentListView) {\n          const movieListContainers = document.querySelectorAll(\"#movieCardsContainer *\");\n          for (let i = 0; i < movieListContainers.length; i++) {\n            movieListContainers[i].classList.add(\"listContainer\");\n          }\n        } else {\n          const movieListContainers = document.querySelectorAll(\"#listViewContainer *\");\n          for (let i = 0; i < movieListContainers.length; i++) {\n            movieListContainers[i].classList.remove(\"listContainer\");\n          }\n        }\n      },\n      children: isListView ? \"gallery\" : \"listview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Movie list reset button\n  function resetButton() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"resetButton\",\n      className: \"navButton\",\n      type: \"button\",\n      onClick: () => {\n        resetList();\n      },\n      children: \"Reset List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Reset movie list\n  async function resetList() {\n    // Remove list view class from elements and return to default gallery view\n    const contentContainer = document.querySelector(\".contentContainer\");\n    if (contentContainer.id === \"listViewContainer\") {\n      const movieListContainers = document.querySelectorAll(\"#listViewContainer *\");\n      for (let i = 0; i < movieListContainers.length; i++) {\n        movieListContainers[i].classList.remove(\"listContainer\");\n      }\n      const movieListContainer = document.getElementById(\"listViewContainer\");\n      movieListContainer.removeAttribute(\"id\");\n      movieListContainer.setAttribute(\"id\", \"movieCardsContainer\");\n      const viewButton = document.getElementById(\"viewButton\");\n      const isListView = false;\n      setIsListView(isListView);\n      viewButton.innerHTML = \"listview\";\n    }\n    // Reset checkboxes with reset\n    const checkboxes = document.querySelectorAll(\".checkbox\");\n    for (let i = 0; i < checkboxes.length; i++) {\n      checkboxes[i].checked = false;\n    }\n    userData.movieData = initMovieData;\n    await updateUserDB(userData._id);\n    setUserData(userData);\n    setMovieData(userData.movieData);\n  }\n\n  // Title header and menu bar\n  function header() {\n    return /*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"siteTitleContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          id: \"siteTitle\",\n          children: \"cinefile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n        children: [viewStyleButton(), resetButton()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Renders component display\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"page\",\n    children: [header(), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"bgWrap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: isListView ? 'listViewContainer' : 'movieCardsContainer',\n      className: \"contentContainer\",\n      children: movieCards()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n}\n_s(MovieCards, \"T1yVurmjJ/If1IuJe+B7P4U3Fl4=\");\n_c2 = MovieCards;\nvar _c, _c2;\n$RefreshReg$(_c, \"MovieCard\");\n$RefreshReg$(_c2, \"MovieCards\");","map":{"version":3,"names":["React","useEffect","useState","tmdbKey","MovieCard","props","metaData","checked","toggleViewed","imdbId","favorite","toggleFavorite","deleteMovie","rank","movieTitle","year","posterPath","overview","MovieCards","userData","setUserData","movieData","setMovieData","isListView","setIsListView","initMovieData","require","userId","getUserData","response","fetch","ok","message","statusText","window","alert","json","length","initData","console","log","map","setChecked","setFavorite","addData","updateUserDB","_id","i","title","poster_path","release_date","substring","id","updatedUser","method","body","JSON","stringify","headers","find","movie","toggleCheck","newMovieData","filter","movies","movieCards","movieMetaData","viewStyleButton","currentListView","movieListContainers","document","querySelectorAll","classList","add","remove","resetButton","resetList","contentContainer","querySelector","movieListContainer","getElementById","removeAttribute","setAttribute","viewButton","innerHTML","checkboxes","header"],"sources":["C:/Users/User/OneDrive/Desktop/cinemafile/client/src/components/movieCard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst tmdbKey = \"11039f14945ee0f2e0036d42b77c687b\"\r\n\r\n// Test user & db schema:\r\n/* \r\n_id: 6369d823852305533b133048\r\n\r\nuserName: user1\r\n\r\npassword: password1\r\n\r\nhash: passwordhash\r\n\r\nsalt: hashsalt\r\n\r\nmovieData: [] \r\n*/\r\n\r\n// Movie Card template\r\nconst MovieCard = (props) => (\r\n  <div className=\"movieCard\">\r\n    <div className='cardOptionsContainer'>\r\n      <div className='viewedCheckContainer'>\r\n        <label className=\"checkLabel\">\r\n          <input\r\n            className=\"checkbox\"\r\n            type=\"checkbox\"\r\n            defaultChecked={props.metaData.checked}\r\n            onChange={() => {\r\n              props.toggleViewed(props.metaData.imdbId);\r\n            }}\r\n          />\r\n          Viewed\r\n        </label>\r\n      </div>\r\n      <div className='favoriteCheckContainer'>\r\n        <label className=\"checkLabel\">\r\n          <input\r\n            className=\"checkbox\"\r\n            type=\"checkbox\"\r\n            defaultChecked={props.metaData.favorite}\r\n            onChange={() => {\r\n              props.toggleFavorite(props.metaData.imdbId);\r\n            }}\r\n          />\r\n          Favorite\r\n        </label>\r\n      </div>\r\n      <div className='deleteCardContainer'>\r\n        <button className=\"deleteButton\" type=\"button\"\r\n          onClick={() => {\r\n            props.deleteMovie(props.metaData.imdbId);\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div className='movieInfoContainer'>\r\n      <div className=\"rank\">{props.metaData.rank}</div>\r\n      <div className='titleYearContainer'>\r\n        <div className='title'>{props.metaData.movieTitle}</div>\r\n        <div className='year'>{props.metaData.year}</div>\r\n      </div>\r\n    </div>\r\n    <div className='moviePosterContainer'>\r\n      <img src={`https://image.tmdb.org/t/p/original/${props.metaData.posterPath}`} alt=\"Movie poster\" className='posterImg' />\r\n    </div>\r\n    <div className='synopsis'>\r\n      {props.metaData.overview}\r\n    </div>\r\n  </div>\r\n);\r\n\r\n// Functional component to render movie cards in app\r\nexport default function MovieCards() {\r\n  const [userData, setUserData] = useState([]);\r\n  const [movieData, setMovieData] = useState([]);\r\n  const [isListView, setIsListView] = useState(false);\r\n  const initMovieData = require(\"../initData/initMovieData.json\");\r\n\r\n  const userId = '6370584abcfd94a3d0d7c675';\r\n\r\n  // Method to fetch user data and render cards when movie list updates\r\n  useEffect(() => {\r\n    async function getUserData() {\r\n      const response = await fetch(`http://localhost:5000/userData/${userId}`);\r\n\r\n      if (!response.ok) {\r\n        const message = `An error occurred: ${response.statusText}`;\r\n        window.alert(message);\r\n        return;\r\n      }\r\n\r\n      const userData = await response.json();\r\n      setUserData(userData);\r\n      const movieData = userData.movieData;\r\n      setMovieData(movieData);\r\n    }\r\n\r\n    getUserData();\r\n\r\n    return;\r\n  }, [movieData.length]);\r\n\r\n  initData();\r\n\r\n  async function initData() {\r\n    console.log(userData);\r\n    userData.movieData = initMovieData;\r\n\r\n    userData.movieData.map((setChecked) =>\r\n      setChecked.checked = false)\r\n    userData.movieData.map((setFavorite) =>\r\n      setFavorite.favorite = false)\r\n\r\n    addData();\r\n    setUserData(userData);\r\n    await updateUserDB(userData._id);\r\n  }\r\n\r\n  // Method to populate metadata from external tmdb API for each ID in initialized list\r\n  async function addData() {\r\n    for (let i = 0; i < initMovieData.length; i++) {\r\n      const response = await fetch(`https://api.themoviedb.org/3/movie/${initMovieData[i].imdbId}?api_key=${tmdbKey}&language=en-US`);\r\n\r\n      if (!response.ok) {\r\n        const message = `An error occurred: ${response.statusText}`;\r\n        window.alert(message);\r\n        return;\r\n      }\r\n\r\n      const metaData = await response.json();\r\n\r\n      userData.movieData[i].movieTitle = metaData.title;\r\n      userData.movieData[i].posterPath = metaData.poster_path;\r\n      userData.movieData[i].overview = metaData.overview;\r\n      userData.movieData[i].year = metaData.release_date.substring(0, 4);\r\n    }\r\n  }\r\n\r\n  // Method to update user data in server\r\n  // Post request to update the data in the database\r\n  async function updateUserDB(id) {\r\n    const updatedUser = userData;\r\n\r\n    await fetch(`http://localhost:5000/update/${id}`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(updatedUser),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n    });\r\n  }\r\n\r\n  // Toggle viewed status and update user data\r\n  async function toggleViewed(id) {\r\n    const checked = userData.movieData.find(movie => movie.id === id).checked;\r\n    const toggleCheck = !checked;\r\n    userData.movieData.find(movie => movie.id === id).checked = toggleCheck;\r\n    setUserData(userData);\r\n    await updateUserDB(userData._id);\r\n  }\r\n\r\n  // Toggle favorite and update user data\r\n  async function toggleFavorite(id) {\r\n    const favorite = userData.movieData.find(movie => movie.id === id).favorite;\r\n    const toggleFavorite = !favorite;\r\n    userData.movieData.find(movie => movie.id === id).favorite = toggleFavorite;\r\n    setUserData(userData);\r\n    await updateUserDB(userData._id);\r\n  }\r\n\r\n  // Delete a movie entry\r\n  async function deleteMovie(id) {\r\n    const newMovieData = userData.movieData.filter((movies) => movies.id !== id);\r\n    userData.movieData = newMovieData;\r\n    await updateUserDB(userData._id);\r\n\r\n    setUserData(userData);\r\n    setMovieData(newMovieData);\r\n  }\r\n\r\n  // Populate metadata for each movie card\r\n  function movieCards() {\r\n    const movieMetaData = movieData;\r\n    return movieMetaData.map((metaData) => {\r\n      metaData.id = metaData.imdbId;\r\n      return (\r\n        <MovieCard\r\n          metaData={metaData}\r\n          toggleViewed={() => toggleViewed(metaData.imdbId)}\r\n          toggleFavorite={() => toggleFavorite(metaData.imdbId)}\r\n          deleteMovie={() => deleteMovie(metaData.imdbId)}\r\n          key={metaData.imdbId}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  // View style button\r\n  function viewStyleButton() {\r\n    return (\r\n      <button id=\"viewButton\" className=\"navButton\" type=\"button\"\r\n        onClick={() => {\r\n          const currentListView = !isListView;\r\n          setIsListView(isListView => !isListView);\r\n          if (currentListView) {\r\n            const movieListContainers = document.querySelectorAll(\"#movieCardsContainer *\");\r\n            for (let i = 0; i < movieListContainers.length; i++) {\r\n              movieListContainers[i].classList.add(\"listContainer\");\r\n            }\r\n          } else {\r\n            const movieListContainers = document.querySelectorAll(\"#listViewContainer *\");\r\n            for (let i = 0; i < movieListContainers.length; i++) {\r\n              movieListContainers[i].classList.remove(\"listContainer\");\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {isListView ? \"gallery\" : \"listview\"}\r\n      </button>\r\n    )\r\n  }\r\n\r\n  // Movie list reset button\r\n  function resetButton() {\r\n    return (\r\n      <button id=\"resetButton\" className=\"navButton\" type=\"button\"\r\n        onClick={() => {\r\n          resetList();\r\n        }}\r\n      >\r\n        Reset List\r\n      </button>\r\n    )\r\n  }\r\n\r\n  // Reset movie list\r\n  async function resetList() {\r\n\r\n    // Remove list view class from elements and return to default gallery view\r\n    const contentContainer = document.querySelector(\".contentContainer\");\r\n    if (contentContainer.id === \"listViewContainer\") {\r\n      const movieListContainers = document.querySelectorAll(\"#listViewContainer *\");\r\n      for (let i = 0; i < movieListContainers.length; i++) {\r\n        movieListContainers[i].classList.remove(\"listContainer\");\r\n      }\r\n      const movieListContainer = document.getElementById(\"listViewContainer\");\r\n      movieListContainer.removeAttribute(\"id\");\r\n      movieListContainer.setAttribute(\"id\", \"movieCardsContainer\");\r\n      const viewButton = document.getElementById(\"viewButton\");\r\n      const isListView = false;\r\n      setIsListView(isListView);\r\n      viewButton.innerHTML = \"listview\";\r\n    }\r\n    // Reset checkboxes with reset\r\n    const checkboxes = document.querySelectorAll(\".checkbox\");\r\n    for (let i = 0; i < checkboxes.length; i++) {\r\n      checkboxes[i].checked = false;\r\n    }\r\n\r\n    userData.movieData = initMovieData;\r\n    await updateUserDB(userData._id);\r\n    setUserData(userData);\r\n    setMovieData(userData.movieData);\r\n  }\r\n\r\n  // Title header and menu bar\r\n  function header() {\r\n    return (\r\n      <header>\r\n        <div id=\"siteTitleContainer\">\r\n          <h1 id=\"siteTitle\">cinefile</h1>\r\n        </div>\r\n        <nav>\r\n          {viewStyleButton()}\r\n          {resetButton()}\r\n        </nav>\r\n      </header>\r\n    )\r\n  }\r\n\r\n  // Renders component display\r\n  return (\r\n    <div id=\"page\">\r\n      {header()}\r\n      <div id=\"bgWrap\"></div>\r\n      <div id={isListView ? 'listViewContainer' : 'movieCardsContainer'} className=\"contentContainer\">\r\n        {movieCards()}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}