{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\cinemafile\\\\client\\\\src\\\\components\\\\movieCard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n\n// Test user & db schema:\n/* \r\n_id: 6369d823852305533b133048\r\n\r\nuserName: user1\r\n\r\npassword: password1\r\n\r\nhash: passwordhash\r\n\r\nsalt: hashsalt\r\n\r\nmovieData: [] \r\n*/\n\n// Movie Card template\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieCard = props => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"movieCard\",\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cardOptionsContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"viewedCheckContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          defaultChecked: props.metaData.checked,\n          onClick: () => {\n            props.toggleViewed(props.metaData.id);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this), \"Viewed\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"favoriteButton\",\n      children: \"favorite\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"deleteCardContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button-link\",\n        type: \"button\",\n        onClick: () => {\n          props.deleteMovie(props.metaData.id);\n          console.log(props.metaData.id);\n        },\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"rankTitleYearContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movieRank\",\n      children: props.metaData.rank\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movieTitleYearContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movieTitle\",\n        children: props.metaData.movieTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movieYear\",\n        children: props.metaData.year\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"moviePosterContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `https://image.tmdb.org/t/p/original/${props.metaData.posterPath}`,\n      alt: \"Movie poster\",\n      className: \"posterImg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movieSynopsis\",\n    children: props.metaData.overview\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 20,\n  columnNumber: 3\n}, this);\n\n// Functional component to render movie cards in app\n_c = MovieCard;\nexport default function MovieCards() {\n  _s();\n  const [userData, setUserData] = useState([]);\n  const [movieData, setMovieData] = useState([]);\n\n  /*   const initMovieData = require(\"../initData/initMovieData.json\"); */\n\n  const userId = '6369d823852305533b133048';\n\n  // Method to fetch user data from database\n  useEffect(() => {\n    async function getUserData() {\n      const response = await fetch(`http://localhost:5000/userData/${userId}`);\n      if (!response.ok) {\n        const message = `An error occurred: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n      const userData = await response.json();\n      setUserData(userData);\n      const movieData = userData.movieData;\n      setMovieData(movieData);\n      console.log(userData);\n    }\n    getUserData();\n    return;\n  }, [movieData.length]);\n\n  // Initialize movie list for new users\n  /*   if (typeof userData.movieData === \"undefined\" || userData.movieData.length === 0) {\r\n      userData.movieData = initMovieData;\r\n      updateUserDB(userData._id);\r\n    } */\n\n  // Method to update user data in server\n  // This will send a post request to update the data in the database.\n  async function updateUserDB(id) {\n    console.log(userData);\n    const updatedUser = userData;\n    await fetch(`http://localhost:5000/update/${id}`, {\n      method: \"POST\",\n      body: JSON.stringify(updatedUser),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  // TODO Method to toggle viewed status and update user data\n\n  async function toggleViewed(id) {\n    console.log(id);\n    userData.movieData.find(movie => movie.id === id).checked = toggleCheck;\n    console.log(toggleCheck);\n  }\n\n  // TODO Method to toggle favorite and update user data\n  async function toggleFavorite() {}\n\n  // This method will delete a movie entry\n  async function deleteMovie(id) {\n    const newMovieData = userData.movieData.filter(movies => movies.id !== id);\n    userData.movieData = newMovieData;\n    await updateUserDB(userData._id);\n    setUserData(userData);\n    setMovieData(newMovieData);\n    console.log(userData);\n  }\n\n  // Method to map out movie data & populate metadata for each movie card\n  function movieCards() {\n    console.log(userData.movieData);\n    const movieMetaData = movieData;\n    return movieMetaData.map(metaData => {\n      metaData.id = metaData.imdbId;\n      return /*#__PURE__*/_jsxDEV(MovieCard, {\n        metaData: metaData,\n        toggleViewed: () => toggleViewed(metaData.checked)\n        /*           favorite={favorite} */,\n        deleteMovie: () => deleteMovie(metaData.id)\n      }, metaData.imdbId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this);\n    });\n  }\n\n  // Displays the movie cards\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"movieCardsContainer\",\n    children: movieCards()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n}\n_s(MovieCards, \"N4ZQc/1fT3fo/ud17BFuo7FPVT0=\");\n_c2 = MovieCards;\nvar _c, _c2;\n$RefreshReg$(_c, \"MovieCard\");\n$RefreshReg$(_c2, \"MovieCards\");","map":{"version":3,"names":["React","useEffect","useState","MovieCard","props","metaData","checked","toggleViewed","id","deleteMovie","console","log","rank","movieTitle","year","posterPath","overview","MovieCards","userData","setUserData","movieData","setMovieData","userId","getUserData","response","fetch","ok","message","statusText","window","alert","json","length","updateUserDB","updatedUser","method","body","JSON","stringify","headers","find","movie","toggleCheck","toggleFavorite","newMovieData","filter","movies","_id","movieCards","movieMetaData","map","imdbId"],"sources":["C:/Users/User/OneDrive/Desktop/cinemafile/client/src/components/movieCard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\n// Test user & db schema:\r\n/* \r\n_id: 6369d823852305533b133048\r\n\r\nuserName: user1\r\n\r\npassword: password1\r\n\r\nhash: passwordhash\r\n\r\nsalt: hashsalt\r\n\r\nmovieData: [] \r\n*/\r\n\r\n// Movie Card template\r\nconst MovieCard = (props) => (\r\n  <div className=\"movieCard\">\r\n    <div className='cardOptionsContainer'>\r\n      <div className='viewedCheckContainer'>\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            defaultChecked={props.metaData.checked}\r\n            onClick={() => {\r\n              props.toggleViewed(props.metaData.id);\r\n            }}\r\n          />\r\n          Viewed\r\n        </label>\r\n      </div>\r\n      <div className='favoriteButton'>favorite</div>\r\n      <div className='deleteCardContainer'>\r\n        <button className=\"button-link\" type=\"button\"\r\n          onClick={() => {\r\n            props.deleteMovie(props.metaData.id);\r\n            console.log(props.metaData.id)\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div className='rankTitleYearContainer'>\r\n      <div className=\"movieRank\">{props.metaData.rank}</div>\r\n      <div className='movieTitleYearContainer'>\r\n        <div className='movieTitle'>{props.metaData.movieTitle}</div>\r\n        <div className='movieYear'>{props.metaData.year}</div>\r\n      </div>\r\n    </div>\r\n    <div className='moviePosterContainer'>\r\n      <img src={`https://image.tmdb.org/t/p/original/${props.metaData.posterPath}`} alt=\"Movie poster\" className='posterImg' />\r\n    </div>\r\n    <div className='movieSynopsis'>\r\n      {props.metaData.overview}\r\n    </div>\r\n  </div>\r\n);\r\n\r\n// Functional component to render movie cards in app\r\nexport default function MovieCards() {\r\n  const [userData, setUserData] = useState([]);\r\n  const [movieData, setMovieData] = useState([]);\r\n\r\n  /*   const initMovieData = require(\"../initData/initMovieData.json\"); */\r\n\r\n  const userId = '6369d823852305533b133048';\r\n\r\n  // Method to fetch user data from database\r\n  useEffect(() => {\r\n    async function getUserData() {\r\n      const response = await fetch(`http://localhost:5000/userData/${userId}`);\r\n\r\n      if (!response.ok) {\r\n        const message = `An error occurred: ${response.statusText}`;\r\n        window.alert(message);\r\n        return;\r\n      }\r\n\r\n      const userData = await response.json();\r\n      setUserData(userData);\r\n      const movieData = userData.movieData;\r\n      setMovieData(movieData);\r\n      console.log(userData);\r\n    }\r\n\r\n    getUserData();\r\n\r\n    return;\r\n  }, [movieData.length]);\r\n\r\n  // Initialize movie list for new users\r\n  /*   if (typeof userData.movieData === \"undefined\" || userData.movieData.length === 0) {\r\n      userData.movieData = initMovieData;\r\n      updateUserDB(userData._id);\r\n    } */\r\n\r\n  // Method to update user data in server\r\n  // This will send a post request to update the data in the database.\r\n  async function updateUserDB(id) {\r\n    console.log(userData);\r\n    const updatedUser = userData;\r\n\r\n    await fetch(`http://localhost:5000/update/${id}`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(updatedUser),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n    });\r\n\r\n  }\r\n\r\n  // TODO Method to toggle viewed status and update user data\r\n\r\n  async function toggleViewed(id) {\r\n    console.log(id);\r\n    userData.movieData.find(movie => movie.id === id).checked = toggleCheck;\r\n    console.log(toggleCheck);\r\n\r\n  }\r\n\r\n  // TODO Method to toggle favorite and update user data\r\n  async function toggleFavorite() {\r\n\r\n  }\r\n\r\n  // This method will delete a movie entry\r\n  async function deleteMovie(id) {\r\n    const newMovieData = userData.movieData.filter((movies) => movies.id !== id);\r\n    userData.movieData = newMovieData;\r\n    await updateUserDB(userData._id);\r\n\r\n    setUserData(userData);\r\n    setMovieData(newMovieData);\r\n    console.log(userData);\r\n  }\r\n\r\n  // Method to map out movie data & populate metadata for each movie card\r\n  function movieCards() {\r\n    console.log(userData.movieData);\r\n    const movieMetaData = movieData;\r\n    return movieMetaData.map((metaData) => {\r\n      metaData.id = metaData.imdbId;\r\n      return (\r\n        <MovieCard\r\n          metaData={metaData}\r\n          toggleViewed={() => toggleViewed(metaData.checked)}\r\n          /*           favorite={favorite} */\r\n          deleteMovie={() => deleteMovie(metaData.id)}\r\n          key={metaData.imdbId}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  // Displays the movie cards\r\n  return (\r\n    <div id='movieCardsContainer'>\r\n      {movieCards()}\r\n    </div>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}