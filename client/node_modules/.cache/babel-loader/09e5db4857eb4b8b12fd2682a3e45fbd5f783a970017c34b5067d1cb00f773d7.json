{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\cinemafile\\\\client\\\\src\\\\components\\\\ResetButton.js\";\nimport React, { useState } from \"react\";\n\n// Movie list reset button\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ResetButton(_ref) {\n  let {\n    isListView,\n    setIsListView,\n    userData,\n    setUserData,\n    setMovieData\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    id: \"resetButton\",\n    className: \"navButton\",\n    type: \"button\",\n    onClick: () => {\n      ResetList({\n        isListView,\n        setIsListView,\n        userData,\n        setUserData,\n        setMovieData\n      });\n    },\n    children: \"Reset List\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n}\n\n// Reset movie list\n_c = ResetButton;\nasync function ResetList(_ref2) {\n  let {\n    isListView,\n    setIsListView,\n    userData,\n    setUserData,\n    setMovieData\n  } = _ref2;\n  const initMovieData = require(\"../initData/initMovieData.json\");\n\n  // Remove list view class from elements and return to default gallery view\n  const contentContainer = document.querySelector(\".contentContainer\");\n  if (contentContainer.id === \"listViewContainer\") {\n    const movieListContainers = document.querySelectorAll(\"#listViewContainer *\");\n    for (let i = 0; i < movieListContainers.length; i++) {\n      movieListContainers[i].classList.remove(\"listContainer\");\n    }\n    const movieListContainer = document.getElementById(\"listViewContainer\");\n    movieListContainer.removeAttribute(\"id\");\n    movieListContainer.setAttribute(\"id\", \"movieCardsContainer\");\n    const viewButton = document.getElementById(\"viewButton\");\n    isListView = false;\n    setIsListView(isListView);\n    viewButton.innerHTML = \"listview\";\n  }\n  // Reset checkboxes with reset\n  const checkboxes = document.querySelectorAll(\".checkbox\");\n  for (let i = 0; i < checkboxes.length; i++) {\n    checkboxes[i].checked = false;\n  }\n  userData.movieData = initMovieData;\n  await updateUserDB(userData._id);\n  setUserData(userData);\n  setMovieData(userData.movieData);\n}\n_c2 = ResetList;\nasync function updateUserDB(_ref3) {\n  let {\n    userData\n  } = _ref3;\n  const updatedUser = userData;\n  const id = userData._id;\n  await fetch(`http://localhost:5000/update/${id}`, {\n    method: \"POST\",\n    body: JSON.stringify(updatedUser),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}\nvar _c, _c2;\n$RefreshReg$(_c, \"ResetButton\");\n$RefreshReg$(_c2, \"ResetList\");","map":{"version":3,"names":["React","useState","ResetButton","isListView","setIsListView","userData","setUserData","setMovieData","ResetList","initMovieData","require","contentContainer","document","querySelector","id","movieListContainers","querySelectorAll","i","length","classList","remove","movieListContainer","getElementById","removeAttribute","setAttribute","viewButton","innerHTML","checkboxes","checked","movieData","updateUserDB","_id","updatedUser","fetch","method","body","JSON","stringify","headers"],"sources":["C:/Users/User/OneDrive/Desktop/cinemafile/client/src/components/ResetButton.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// Movie list reset button\r\nexport default function ResetButton({ isListView, setIsListView, userData, setUserData, setMovieData }) {\r\n    return (\r\n        <button id=\"resetButton\" className=\"navButton\" type=\"button\"\r\n            onClick={() => {\r\n                ResetList({ isListView, setIsListView, userData, setUserData, setMovieData });\r\n            }}\r\n        >\r\n            Reset List\r\n        </button>\r\n    )\r\n}\r\n\r\n// Reset movie list\r\nasync function ResetList({ isListView, setIsListView, userData, setUserData, setMovieData }) {\r\n    const initMovieData = require(\"../initData/initMovieData.json\");\r\n\r\n    // Remove list view class from elements and return to default gallery view\r\n    const contentContainer = document.querySelector(\".contentContainer\");\r\n    if (contentContainer.id === \"listViewContainer\") {\r\n        const movieListContainers = document.querySelectorAll(\"#listViewContainer *\");\r\n        for (let i = 0; i < movieListContainers.length; i++) {\r\n            movieListContainers[i].classList.remove(\"listContainer\");\r\n        }\r\n        const movieListContainer = document.getElementById(\"listViewContainer\");\r\n        movieListContainer.removeAttribute(\"id\");\r\n        movieListContainer.setAttribute(\"id\", \"movieCardsContainer\");\r\n        const viewButton = document.getElementById(\"viewButton\");\r\n        isListView = false;\r\n        setIsListView(isListView);\r\n        viewButton.innerHTML = \"listview\";\r\n    }\r\n    // Reset checkboxes with reset\r\n    const checkboxes = document.querySelectorAll(\".checkbox\");\r\n    for (let i = 0; i < checkboxes.length; i++) {\r\n        checkboxes[i].checked = false;\r\n    }\r\n\r\n    userData.movieData = initMovieData;\r\n    await updateUserDB(userData._id);\r\n    setUserData(userData);\r\n    setMovieData(userData.movieData);\r\n}\r\n\r\nasync function updateUserDB({ userData }) {\r\n    const updatedUser = userData;\r\n    const id = userData._id;\r\n\r\n    await fetch(`http://localhost:5000/update/${id}`, {\r\n        method: \"POST\",\r\n        body: JSON.stringify(updatedUser),\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n    });\r\n}"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAEvC;AAAA;AACA,eAAe,SAASC,WAAW,OAAqE;EAAA,IAApE;IAAEC,UAAU;IAAEC,aAAa;IAAEC,QAAQ;IAAEC,WAAW;IAAEC;EAAa,CAAC;EAClG,oBACI;IAAQ,EAAE,EAAC,aAAa;IAAC,SAAS,EAAC,WAAW;IAAC,IAAI,EAAC,QAAQ;IACxD,OAAO,EAAE,MAAM;MACXC,SAAS,CAAC;QAAEL,UAAU;QAAEC,aAAa;QAAEC,QAAQ;QAAEC,WAAW;QAAEC;MAAa,CAAC,CAAC;IACjF,CAAE;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAGG;AAEjB;;AAEA;AAAA,KAZwBL,WAAW;AAanC,eAAeM,SAAS,QAAqE;EAAA,IAApE;IAAEL,UAAU;IAAEC,aAAa;IAAEC,QAAQ;IAAEC,WAAW;IAAEC;EAAa,CAAC;EACvF,MAAME,aAAa,GAAGC,OAAO,CAAC,gCAAgC,CAAC;;EAE/D;EACA,MAAMC,gBAAgB,GAAGC,QAAQ,CAACC,aAAa,CAAC,mBAAmB,CAAC;EACpE,IAAIF,gBAAgB,CAACG,EAAE,KAAK,mBAAmB,EAAE;IAC7C,MAAMC,mBAAmB,GAAGH,QAAQ,CAACI,gBAAgB,CAAC,sBAAsB,CAAC;IAC7E,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,mBAAmB,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACjDF,mBAAmB,CAACE,CAAC,CAAC,CAACE,SAAS,CAACC,MAAM,CAAC,eAAe,CAAC;IAC5D;IACA,MAAMC,kBAAkB,GAAGT,QAAQ,CAACU,cAAc,CAAC,mBAAmB,CAAC;IACvED,kBAAkB,CAACE,eAAe,CAAC,IAAI,CAAC;IACxCF,kBAAkB,CAACG,YAAY,CAAC,IAAI,EAAE,qBAAqB,CAAC;IAC5D,MAAMC,UAAU,GAAGb,QAAQ,CAACU,cAAc,CAAC,YAAY,CAAC;IACxDnB,UAAU,GAAG,KAAK;IAClBC,aAAa,CAACD,UAAU,CAAC;IACzBsB,UAAU,CAACC,SAAS,GAAG,UAAU;EACrC;EACA;EACA,MAAMC,UAAU,GAAGf,QAAQ,CAACI,gBAAgB,CAAC,WAAW,CAAC;EACzD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGU,UAAU,CAACT,MAAM,EAAED,CAAC,EAAE,EAAE;IACxCU,UAAU,CAACV,CAAC,CAAC,CAACW,OAAO,GAAG,KAAK;EACjC;EAEAvB,QAAQ,CAACwB,SAAS,GAAGpB,aAAa;EAClC,MAAMqB,YAAY,CAACzB,QAAQ,CAAC0B,GAAG,CAAC;EAChCzB,WAAW,CAACD,QAAQ,CAAC;EACrBE,YAAY,CAACF,QAAQ,CAACwB,SAAS,CAAC;AACpC;AAAC,MA5BcrB,SAAS;AA8BxB,eAAesB,YAAY,QAAe;EAAA,IAAd;IAAEzB;EAAS,CAAC;EACpC,MAAM2B,WAAW,GAAG3B,QAAQ;EAC5B,MAAMS,EAAE,GAAGT,QAAQ,CAAC0B,GAAG;EAEvB,MAAME,KAAK,CAAE,gCAA+BnB,EAAG,EAAC,EAAE;IAC9CoB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW,CAAC;IACjCM,OAAO,EAAE;MACL,cAAc,EAAE;IACpB;EACJ,CAAC,CAAC;AACN;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}